{
    "type" : "app-contents",
    "title" : "Programming",
    "description" : "This is a step-by-step tutorial to introduce to programming in the Javascript language. We will start with some definitions.",
    "position" : -1,
    "contents" : [
        {
            "type" : "app-text",
            "id" : "what-is-a-program",
            "title" : "What is a program?",
            "image": "/data/programming/computer_human.jpg",
            "description" : "A <b>program</b> is a set of instructions that tell the computer what to do.<br>The computer can understand a set of <b>instructions</b> (<i>machine language</i>), but these instructions are often <i>too complicated</i> to understand for humans.<br>In the other hand, <b>human languages</b> are <i>too ambiguous</i> and difficult to understand for a computer."
        },
        {
            "type" : "app-text",
            "id" : "programming",
            "disabled" : true,
            "image": "/data/programming/computer_programming.jpg",
            "title" : "What is programming?",
            "description" : "Programming is the way to <b>give instructions to a computer</b>. We can <b>write computer programs</b> in <i><a href=\"#programming/programming-language\">programming languages</a></i> specially designed for computers."
        },
        {
            "type" : "app-text",
            "id" : "programming-language",
            "disabled" : true,
            "title" : "What is a programming language?",
            "image": "/data/programming/programming_languages.jpg",
            "description" : "A programming language is a set of <b>human-readable instructions</b> (<i>commands</i>) that could be <i>translated to machine language</i>. <br> There are many programming languages, for example, <b>Javascript, Python, C, Java</b> and others. <br> The main differences between programming languages are their <i>syntax and special keywords</i>."
        },
        {
            "type" : "app-text",
            "id" : "interpreters",
            "disabled" : true,
            "title" : "Interpreters",
            "image": "/data/programming/interpretation.jpg",
            "description" : "An <b>interpreter</b> is able to receive a set of instructions (program code), load, translate and run the program <b>immediately</b>.<br>Since the program code is translated <i>on the fly</i>, if at some point the loaded program have <i>syntax errors</i>, the interpreter stops the execution.<br>Main features:<br><ul><li>The program code could run in any machine, if an interpreter is available</li><li>The program is ready to run immediately (simplified analysis and optimization)</li><li>By using an intermediary program as interpreter, the execution performance could be lower than a compiled program.</li></ul>"
        },
        {
            "type" : "app-text",
            "id" : "compilers",
            "disabled" : true,
            "title" : "Compilers",
            "image": "/data/programming/compiler-machine.png",
            "description" : "A <b>compiler</b> can process a set of program files, to <b>verify and translate</b> the code (<i>compilation</i>) into machine language. The result is an executable program file.<br>Main features:<br><ul><li>The resulting executable program will run in specific machines wich understands the machine code (system specific)</li><li>The compilation process could take additional time to analyze, check, optimize and translate the program.</li><li>There is no intermediary. Once compiled, the program could run faster than interpreted programs.</li></ul>"
        },
        {
            "type" : "app-text",
            "id" : "errors",
            "disabled" : true,
            "title" : "Errors",
            "image": "/data/programming/computer_error.jpg",
            "description" : "There are different types of errors (also called <i>Bugs</i>), depending on the stage of the program life-cycle.<br><b>Compile-time Error:</b> If the compiler find <b>errors or invalid syntax</b>, the compilation process fails and no executable program is created.<br>Examples of Compile-time errors are: <i>Syntax errors, Type errors, Class not found, Undefined variable</i><br><b>Run-time Error:</b> If an unexpected error ocurrs <i>during the execution</i> of the compiled program (even when the code is correct), the program is <b>terminated</b>.<br>Examples of run-time errors are: <i>Division by zero, Not enough memory, Null pointer assignment, File not found.</i>"
        }
    ]
}