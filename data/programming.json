{
    "type" : "app-contents",
    "title" : "Programming",
    "description" : "This is a step-by-step tutorial to introduce to programming in the Javascript language. We will start with some definitions.",
    "position" : -1,
    "contents" : [
        {
            "type" : "app-text",
            "id" : "what-is-a-program",
            "title" : "What is a program?",
            "image": "/data/programming/computer_human.jpg",
            "description" : "A <b>program</b> is a set of instructions that tell the computer what to do.<br>The computer can understand a fixed set of <b>commands</b> (<i>machine language</i>), but these instructions are often <i>too complicated</i> to understand for humans.<br>In the other hand, <b>human languages</b> are <i>too ambiguous</i> and difficult to understand for a computer."
        },
        {
            "type" : "app-question",
            "id" : "question-what-is-a-program",
            "title" : "What is a program?",
            "description" : "Wich option describes a computer program:",
            "disabled" : true,
            "options" : [
                "A list of instructions in English language",
                "A set of specific instructions to tell the computer what to do",
                "A list of commands that only a computer understands"
            ],
            "correct" : 1
        },
        {
            "type" : "app-text",
            "id" : "programming",
            "disabled" : true,
            "image": "/data/programming/computer_programming.jpg",
            "title" : "What is programming?",
            "description" : "Programming is the way to <b>give instructions to a computer</b>. We can <b>write computer programs</b> in <i><a href=\"#programming/programming-language\">programming languages</a></i> specially designed for computers.<br>Computers can understand and translate these languages to <i>machine language</i>."
        },
        {
            "type" : "app-question",
            "id" : "question-programming",
            "title" : "What is programming?",
            "disabled" : true,
            "description" : "How can we program a computer?",
            "options" : [
                "Computers can't understand any language",
                "Using a set of electrical circuits",
                "Writing programs in a programming language"
            ],
            "correct" : 2
        },
        {
            "type" : "app-text",
            "id" : "programming-language",
            "disabled" : true,
            "title" : "What is a programming language?",
            "image": "/data/programming/programming_languages.jpg",
            "description" : "A programming language is a set of <b>human-readable instructions</b> (<i>commands</i>) that could be <i>translated to machine language</i>. <br> There are many programming languages, for example, <b>Javascript, Python, C, Java</b> and others. <br> The main differences between programming languages are their <i>syntax and special keywords</i>."
        },
        {
            "type" : "app-question",
            "id" : "question-programming-language",
            "title" : "What is a programming language?",
            "disabled" : true,
            "description" : "A programming language is",
            "options" : [
                "Human-readable code which can be translated to computer language",
                "A set of instructions not readable for humans, only for computers",
                "A special language used for programmers to talk with computers"
            ],
            "correct" : 0
        },
        {
            "type" : "app-text",
            "id" : "interpreters",
            "disabled" : true,
            "title" : "Interpreters",
            "image": "/data/programming/interpretation.jpg",
            "description" : "An <b>interpreter</b> is able to receive a set of instructions (program code), load, translate and run the program <b>immediately</b>.<br>Since the program code is translated <i>on the fly</i>, if at some point the loaded program have <i>syntax errors</i>, the interpreter stops the execution.<br>Main features:<br><ul><li>The program code could run in any machine, if an interpreter is available</li><li>The program is ready to run immediately (simplified analysis and optimization)</li><li>By using an intermediary program as interpreter, the execution performance could be lower than a compiled program.</li></ul>"
        },
        {
            "type" : "app-question",
            "id" : "question-interpreters",
            "title" : "Interpreters",
            "disabled" : true,
            "description" : "How an interpreter works?",
            "options" : [
                "Takes a set of program files to generate a binary executable",
                "Translates human readable instructions running them in machine language on the fly",
                "Converts english language instructions into binary code"
            ],
            "correct" : 1
        },
        {
            "type" : "app-text",
            "id" : "compilers",
            "disabled" : true,
            "title" : "Compilers",
            "image": "/data/programming/compiler-machine.png",
            "description" : "A <b>compiler</b> can process a set of program files, to <b>verify and translate</b> the code (<i>compilation</i>) into machine language. The result is an executable program file.<br>Main features:<br><ul><li>The resulting executable program will run in specific systems (<i>architecture</i>) wich understands the machine code (system specific)</li><li>The compilation process could take additional time to analyze, check, optimize and translate the program.</li><li>There is no intermediary. Once compiled, the program could run faster than interpreted programs.</li></ul>"
        },
        {
            "type" : "app-question",
            "id" : "question-compilers",
            "title" : "Compilers",
            "disabled" : true,
            "description" : "What is the difference between interpreters and compilers?",
            "options" : [
                "Interpreters needs more time than compilers, to analyze, check and optimize code before running a program",
                "Compiled programs are restricted to specific systems. Interpreted programs can run in any system where an interpreter is available",
                "Compiled programs must be compiled each time the program runs. Interpreted programs not"
            ],
            "correct" : 1
        },
        {
            "type" : "app-text",
            "id" : "errors",
            "disabled" : true,
            "title" : "Errors",
            "image": "/data/programming/computer_error.jpg",
            "description" : "There are different types of errors (also called <i>Bugs</i>), depending on the stage of the program life-cycle.<br><b>Compile-time Error:</b> When the compiler find <b>code errors or invalid syntax</b> before running a program, the compilation process fails and no executable program is created.<br>Examples of Compile-time errors are: <i>Syntax errors, Type errors, Class not found, Undefined variable</i><br><b>Run-time Error:</b> When an unexpected error ocurrs <i>during the execution</i> of the compiled program due to internal or external causes (not detected at compile-time).<br>Examples of run-time errors are: <i>Division by zero, Not enough memory, Null pointer assignment, File not found, Network error.</i><br>As a special case for interpreters, compile-time errors could be found during run-time."
        },
        {
            "type" : "app-question",
            "id" : "question-errors",
            "title" : "Errors",
            "disabled" : true,
            "description" : "Examples of Compile-time errors (code errors) are:",
            "options" : [
                "Syntax errors, Division by zero, Network error",
                "Type errors, Null pointer assignments, Not enough memory",
                "Type errors, Syntax errors, Undefined variables"
            ],
            "correct" : 1
        },
        {
            "type" : "app-text",
            "id" : "debugging",
            "disabled" : true,
            "title" : "Debugging",
            "image": "/data/programming/debugging.png",
            "description" : "<b>Debugging</b> is the process to analyze the execution of a program to detect and correct run-time errors and logical errors.<br> Sometimes a running program does something wrong/unexpected or fails without notice. In those cases, programmers will check the sequence of execution to detect any problem:<br><ul><li>Verifying current variables, values and state.</li><li>Checking the order and conditions of execution steps (program logic).</li><li>Capturing and isolating failures (exceptions) to find root causes</li></ul>"
        },
        {
            "type" : "app-text",
            "id" : "debugging-tools",
            "disabled" : true,
            "title" : "Debugging Tools",
            "image": "/data/programming/debugging.png",
            "description" : "There are 3 important tools to help debug applications:<ul><li><b>A debugger application:</b> Allows to execute the program step by step, to inspect current values and verify the expected code sequence</li><li><b>Application logs</b>: Files storing run-time application messages, to help find clues for errors and wrong behavior.</li><li><b>Stack Traces</b>: Run-time information (<i>call stack</i>) with errors/exceptions messages, loaded files and functions called to reach some execution point. Sometimes, an error is caused in another level of execution, not the failing point.</li></ul>"
        }
    ]
}